package com.board.controller;

import com.board.VO.BoardVO;
import com.board.dao.BoardDao;
import com.board.paging.Paging;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URLEncoder;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class ListController {
	@SuppressWarnings("unused")
	private Logger log = Logger.getLogger(getClass());
	private int pageSize = 10;
	private int blockCount = 10;

	@Autowired
	private BoardDao boardDao;

	// 게시물 조회 메서드
	@RequestMapping({ "/board/list.do" })
    public ModelAndView process(
            @RequestParam(value = "pageNum", defaultValue = "1") int currentPage, // 페이징
            @RequestParam(value = "keyField", defaultValue = "") String keyField,
            @RequestParam(value = "keyWord", defaultValue = "") String keyWord) {
		String pagingHtml = "";
		@SuppressWarnings({ "unchecked", "rawtypes" })
		HashMap<String, Object> map = new HashMap();
		map.put("keyField", keyField);
		map.put("keyWord", keyWord);

		int count = this.boardDao.getCount(map); // 전체글 갯수

		Paging page = new Paging(keyField, keyWord, currentPage, count,
				this.pageSize, this.blockCount, "list.do");

		pagingHtml = page.getPagingHtml().toString();

		map.put("start", Integer.valueOf(page.getStartCount()));
		map.put("end", Integer.valueOf(page.getEndCount()));

		List<BoardVO> list = null;
		if(count > 0) {
		    list = this.boardDao.list(map);
		}else{
		    list = Collections.emptyList();
		}

		int number = count - (currentPage - 1) * this.pageSize;

		ModelAndView mav = new ModelAndView();
		mav.setViewName("boardList"); // 뷰로 보여질 명
		mav.addObject("count", Integer.valueOf(count));
		mav.addObject("currentPage", Integer.valueOf(currentPage));
		mav.addObject("list", list);
		mav.addObject("pagingHtml", pagingHtml);
		mav.addObject("number", Integer.valueOf(number));

		return mav;
	}

	// 게시물 상세 화면으로 이동하는 메서드
	@RequestMapping("/board/detail.do")
	public ModelAndView detail(@RequestParam(value = "seq") int seq) {
		
	    boardDao.updateHit(seq); // 조회수 증가
	    BoardVO board = boardDao.getBoard(seq); // 게시물 조회
	    ModelAndView mav = new ModelAndView();
	    mav.setViewName("detail"); // 상세보기 뷰 이름 지정

	    String fileName = board.getUploadedFile(); // 업로드된 파일명 저장
	    String filePath = "/upload/" + fileName; // 상대 경로 생성
	    mav.addObject("uploadedFileName", fileName); // 업로드된 파일명 추가
	    mav.addObject("originalFilename", board.getOriginalFilename()); // 원본 파일명 추가
	    mav.addObject("uploadedFilePath", filePath); // 업로드된 파일의 경로 추가
	    mav.addObject("board", board); // 조회된 게시물 정보를 뷰에 전달
	    System.out.println("ListController - detail: board = " + board.toString());
	    return mav;
	}
	
	// 파일 다운로드 메서드
	@RequestMapping(value = "/board/download.do", method = RequestMethod.POST)
	public void download(@RequestParam("fileName") String fileName,
	                     @RequestParam("originalFilename") String originalFilename,
	                     HttpServletRequest request, HttpServletResponse response) throws IOException {

	    // 파일명이 한글일 경우 인코딩
	    //fileName = new String(fileName.getBytes("8859_1"), "UTF-8");
	    //originalFilename = new String(originalFilename.getBytes("8859_1"), "UTF-8");
	    
	    // 실제 파일 경로
	    String projectRealPath = request.getSession().getServletContext().getRealPath("/");
	    String uploadDirPath = "upload";
	    String filePath = projectRealPath + uploadDirPath + File.separator + fileName;
	    System.out.println(request.getSession().getServletContext().getRealPath("/"));
	    // 파일 존재 여부 확인
	    File file = new File(filePath);
	    if (!file.exists()) {
	        throw new FileNotFoundException("File not found: " + filePath);
	    }

	    // 파일 다운로드
	    try (InputStream is = new FileInputStream(file);
	         OutputStream os = response.getOutputStream()) {

	        String mimeType = request.getServletContext().getMimeType(file.getAbsolutePath());
	        response.setContentType(mimeType != null ? mimeType : "application/octet-stream");
	        response.setContentLength((int) file.length());
	        response.setHeader("Content-Disposition", "attachment;filename*=UTF-8''" + URLEncoder.encode(originalFilename, "UTF-8").replaceAll("\\+", "%20") + "");

	        FileCopyUtils.copy(is, os);
	        os.flush();
	    }
	}
}
