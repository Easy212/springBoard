package com.board.controller;

import com.board.VO.BoardVO;
import com.board.dao.BoardDao;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;


@Controller
public class UpdateController {
	@SuppressWarnings("unused")
	private Logger log = Logger.getLogger(getClass());
	private static final String uploadBasePath = "C:\\workspace\\spring2\\WebContent\\upload\\";

	@Autowired
	private BoardDao boardDao;

	// 게시물 수정 화면으로 이동하는 메서드
	@RequestMapping(value = "/board/updateForm.do", method = RequestMethod.POST)
	public ModelAndView updateFormPost(@RequestParam(value = "seq") int seq) {
	    BoardVO board = boardDao.getBoard(seq);
	    ModelAndView mav = new ModelAndView();
	    mav.setViewName("update");
	    board.setOriginalFilename(board.getOriginalFilename()); // 기존의 원본 파일명을 설정
	    mav.addObject("board", board);
	    return mav;
	}

	// 비밀번호 확인 메서드
	@RequestMapping(value = "/checkPassword.do", method = RequestMethod.POST)
	public ResponseEntity<String> checkPassword(
			@RequestParam("seq") Integer seq,
			@RequestParam("pass") String password) {
		Map<String, Object> data = new HashMap<>();
		data.put("seq", seq);
		data.put("pass", password);
		int result = boardDao.checkPassword(data);

		if (result > 0) {
			return new ResponseEntity<>("success", HttpStatus.OK);
		} else {
			return new ResponseEntity<>("fail", HttpStatus.OK);
		}
	}

	@RequestMapping(value = "/board/update.do", method = RequestMethod.POST)
	public ResponseEntity<String> updateBoard(
	    @ModelAttribute BoardVO board,
	    @RequestParam(value = "upload-file", required = false) MultipartFile file,
	    @RequestParam("pass") String password,
	    @RequestParam("file_deleted") String fileDeleted) {
	    try {
	        // 비밀번호 일치 여부 검사
	        Map<String, Object> data = new HashMap<>();
	        data.put("seq", board.getSeq());
	        data.put("pass", password);
	        int result = boardDao.checkPassword(data);
	        
	        if (result <= 0) { // 비밀번호가 일치하지 않는 경우
	            return new ResponseEntity<>("fail", HttpStatus.UNAUTHORIZED);
	        }
	        
	        BoardVO existingBoard = boardDao.getBoard(board.getSeq());
	        
	        // 기존 파일 삭제 및 DB 업데이트
	        if (fileDeleted != null && fileDeleted.equalsIgnoreCase("true")) {
	            if (existingBoard.getUploadedFile() != null) {
	                Path deletePath = Paths.get(uploadBasePath + existingBoard.getUploadedFile());
	                Files.deleteIfExists(deletePath);
	                board.setUploadedFile(null);
	                
	                // 파일 이름을 DB에서 제거
	                boardDao.updateFileName(board.getSeq()); // 파일 컬럼 값 NULL로 업데이트
	            }
	        } else {
	        	if (file != null && !file.isEmpty()) {
	        	    // 기존 파일이 있는 경우 기존 파일 삭제
	        	    if (existingBoard.getUploadedFile() != null) {
	        	        // 기존의 업로드된 파일 삭제
	        	        Path deletePath = Paths.get(uploadBasePath + existingBoard.getUploadedFile());
	        	        Files.deleteIfExists(deletePath);
	        	        
	        	        // 파일 이름을 DB에서 제거
	        	        boardDao.updateFileName(board.getSeq()); // 파일 컬럼 값을 NULL로 업데이트
	        	    }
	        	    
	        	    // 새로운 파일 업로드 및 저장 
	        	    String newFileName = System.currentTimeMillis() + "_" + file.getOriginalFilename();
	        	    Path uploadPath = Paths.get(uploadBasePath + newFileName);
	        	    Files.write(uploadPath, file.getBytes());
	        	    board.setUploadedFile(newFileName);
	        	    
	        	    // 새로운 파일명을 DB로 업데이트
	        	    board.setOriginalFilename(file.getOriginalFilename());
	        	} else {
	        	    // 파일을 선택하지 않았을 때 기존의 파일 정보와 원본 파일명을 유지
	        	    board.setUploadedFile(existingBoard.getUploadedFile());
	        	    board.setOriginalFilename(existingBoard.getOriginalFilename());
	        	}
	        }
	        
	        boardDao.updateBoard(board);
	        
	        return new ResponseEntity<>("success", HttpStatus.OK);
	        
	    } catch (Exception e) {
	        e.printStackTrace(); // 서버 콘솔에 에러 출력
	        return new ResponseEntity<>("fail: " + e.getMessage(),
	                HttpStatus.INTERNAL_SERVER_ERROR);
	    }
	}

}
