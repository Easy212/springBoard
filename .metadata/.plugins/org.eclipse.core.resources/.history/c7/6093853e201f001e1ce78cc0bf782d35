package com.board.controller;

import com.board.VO.BoardVO;
import com.board.dao.BoardDao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.springframework.web.multipart.MultipartFile;

@Controller
public class WriteController {

    @Autowired
    private BoardDao boardDao;
    
    @RequestMapping(value = "/board/write.do", method = RequestMethod.GET)
    public ModelAndView process() {
        System.out.println("글쓰기 레이아웃 전 컨트롤러");
        ModelAndView mav = new ModelAndView();
        mav.setViewName("write");

        return mav;
    }

    @RequestMapping(value = "/board/save.do", method = RequestMethod.POST)
    public ModelAndView save(@ModelAttribute("boardVO") BoardVO boardVO,
                             @RequestParam("file") MultipartFile file,
                             HttpServletRequest request) throws Exception {
        // 파일 처리
        if (!file.isEmpty()) {
            String originalFilename = file.getOriginalFilename();
            String uniqueFileName = saveFile(file, request);
            boardVO.setOriginalFilename(originalFilename); // 수정
            boardVO.setUploadedFile(uniqueFileName);
        }

        // 게시물의 group_id, order_no, 및 depth 값을 설정
        int groupId = boardDao.getGeneratedGroupId();
        boardVO.setGroup_id(groupId);
        boardVO.setOrder_no(0);
        boardVO.setDepth(0);

        // 게시물 저장
        boardDao.insertBoard(boardVO, groupId);

        ModelAndView mav = new ModelAndView("redirect:/board/list.do");
        return mav;
    }

    // 중복파일명 변경 저장 메서드
    private String saveFile(MultipartFile file, HttpServletRequest request) throws IOException {
        // 실제 프로젝트 실행 경로 얻기
        String projectRealPath = request.getSession().getServletContext().getRealPath("/");
        String uploadDirPath = "upload"; // 저장할 상대 경로 지정하기

        String originalFilename = file.getOriginalFilename();
        String fileExtension = originalFilename.substring(originalFilename.lastIndexOf("."));
        String uniqueFileName = UUID.randomUUID().toString() + fileExtension;

        byte[] bytes = file.getBytes();
        Path path = Paths.get(projectRealPath + uploadDirPath + File.separator + uniqueFileName);

        // 파일 저장 경로 생성 (디렉토리가 없는 경우)
        if (!Files.exists(path.getParent())) {
            Files.createDirectories(path.getParent());
        }

        // 파일 저장 
        Files.write(path, bytes);
        return uniqueFileName;
    }
}