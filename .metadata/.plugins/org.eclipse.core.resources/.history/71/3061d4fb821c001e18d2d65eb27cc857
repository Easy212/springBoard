package com.board.controller;

import com.board.VO.BoardVO;
import com.board.dao.BoardDao;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.http.MediaType;

@Controller
public class DeleteController {
	@SuppressWarnings("unused")
	private Logger log = Logger.getLogger(getClass());
	private static final String uploadBasePath = "C:\\workspace\\spring2\\WebContent\\upload\\";

	@Autowired
	private BoardDao boardDao;

	// 게시물 수정 화면으로 이동하는 메서드
	@RequestMapping("/board/updateForm.do")
	public ModelAndView updateForm(@RequestParam(value = "seq") int seq) {
		BoardVO board = boardDao.getBoard(seq);
		ModelAndView mav = new ModelAndView();
		mav.setViewName("update");
		mav.addObject("board", board);
		return mav;
	}

	// 비밀번호 확인 메서드
	@RequestMapping(value = "/checkPassword.do", method = RequestMethod.POST)
	public ResponseEntity<String> checkPassword(
			@RequestParam("seq") Integer seq,
			@RequestParam("pass") String password) {
		Map<String, Object> data = new HashMap<>();
		data.put("seq", seq);
		data.put("pass", password);
		int result = boardDao.checkPassword(data);

		if (result > 0) {
			return new ResponseEntity<>("success", HttpStatus.OK);
		} else {
			return new ResponseEntity<>("fail", HttpStatus.OK);
		}
	}

	// 게시물 수정 처리 메서드
	@RequestMapping(value = "/board/update.do", method = RequestMethod.POST)
	public ResponseEntity<String> updateBoard(
			BoardVO board,
			@RequestParam(value = "upload-file", required = false) MultipartFile file,
			@RequestParam("pass") String password, HttpServletResponse response) {
		try {
			// 비밀번호 일치 여부 검사
			Map<String, Object> data = new HashMap<>();
			data.put("seq", board.getSeq());
			data.put("pass", password);
			int result = boardDao.checkPassword(data);

			if (result <= 0) { // 비밀번호가 일치하지 않는 경우
				return new ResponseEntity<>("fail", HttpStatus.UNAUTHORIZED);
			}

			// 기존 파일 삭제
			if (board.getUploadedFile() != null) {
				Path deletePath = Paths.get(uploadBasePath
						+ board.getUploadedFile());
				Files.deleteIfExists(deletePath);
			}

			// 새로운 파일 저장
			if (!file.isEmpty()) {
				String newFileName = System.currentTimeMillis() + "_"
						+ file.getOriginalFilename();
				Path uploadPath = Paths.get(uploadBasePath + newFileName);
				Files.write(uploadPath, file.getBytes());
				board.setUploadedFile(newFileName);
			} else {
				// 재업로드가 없을 때 기존 파일 이름 유지
				BoardVO existingBoard = boardDao.getBoard(board.getSeq());
				board.setUploadedFile(existingBoard.getUploadedFile());
			}

			boardDao.updateBoard(board);
			// response.sendRedirect("list.do"); // 수정완료후, list.do로 리다이렉트
			return new ResponseEntity<>("success", HttpStatus.OK);

		} catch (Exception e) {
		    e.printStackTrace(); // 서버 콘솔에 에러 출력
		    return new ResponseEntity<>("fail: " + e.getMessage(),
		            HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	// 게시물 삭제 처리 메서드
	@RequestMapping(value = "/board/delete.do", method = RequestMethod.POST)
	public ResponseEntity<String> deleteBoard(@RequestParam("seq") Integer seq) {
		try {
			BoardVO board = boardDao.getBoard(seq);
			if (board.getUploadedFile() != null) {
				Path uploadPath = Paths.get(uploadBasePath
						+ board.getUploadedFile());
				Files.deleteIfExists(uploadPath);
			}
			boardDao.deleteBoard(seq);
			// 삭제 완료 응답을 리턴
			return new ResponseEntity<>("success", HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<>("fail",
					HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

}
