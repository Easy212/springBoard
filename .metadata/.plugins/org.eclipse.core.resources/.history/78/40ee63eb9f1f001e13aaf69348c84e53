<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>게시물 수정</title>
<style>
#file-name{
	display: inline-block;
	width: 117px;
	border: 1px solid;
}
.filebox .upload-name {
	box-sizing: border-box;
    display: inline-block;
    height: 21px;
    vertical-align: middle;
    border: 1px solid ;
    width: 177px;
}

.filebox label {
    display: inline-block;
	border: 1px solid;
    vertical-align: middle;
    background-color: #F0F0F0;
    height: 20px;
    padding: 1px 6px;
    font-size: 14px;
}

.filebox input[type="file"] {
    position: absolute;
    width: 0;
    height: 0;
    padding: 0;
    overflow: hidden;
    border: 0;
}

</style>
<script>
	// 첫부분 공백 제거
	function removeWhiteSpaces(input) {
	  	const validValue = input.value.replace(/^\s+/, '');
	    if (input.value !== validValue) {
	      input.value = validValue;
	    }
	}
	 
	// 복붙했을경우 시작과 끝공백 제거
	function handlePasteEvent(event) {
	    // 텍스트를 가져오는 방법은 브라우저에 따라 다르다
	    let pastedText = event.clipboardData
	      ? event.clipboardData.getData('text')
	      : window.clipboardData.getData('Text');
	
	    // 시작과 끝에 있는 공백 제거
	    pastedText = pastedText.trim();
	
	    // 강제로 input의 value를 승인된 텍스트로 변경한다
	    setTimeout(() => {
	      event.target.value = pastedText;
	    }, 0);
	  }
	//저장될 때 끝 부분의 공백을 제거
	function trimEndOnSubmit(form) {
	    form.title.value = form.title.value.replace(/\s+$/, '');
	    form.name.value = form.name.value.replace(/\s+$/, '');
	    form.content.value = form.content.value.replace(/\s+$/, '');
	    return true;
	}
	
	function validateMaxLengthAndSubmit(form) {
		  trimEndOnSubmit(form);
			  
		  const fields = ["title", "name", "content", "pass"];
		  const fieldLabels = ["제목", "이름", "내용", "비밀번호"];
		  const maxLimits = [100, 50, 500, 10];

		  for (let i = 0; i < fields.length; i++) {
		    const input = form[fields[i]];
		    const fieldLabel = fieldLabels[i];

		    // 입력값이 없거나 공백만 있는 경우 경고창을 띄운다.
		    input.value = input.value.trim(); 

		    if (!input.value) {
		      alert(fieldLabel + "을(를) 입력해주세요.");
		      input.focus();
		      return false;
		    }

		    if (!validateInputMaxLength(input, maxLimits[i])) {
		      return false;
		    }
		  }

		  return true;
		}

		// 입력값의 최대 길이를 검사하고 경고창을 출력한다.
		function validateInputMaxLength(input, maxLength) {
		  const inputValue = input.value;
		  const fieldLabel = input.getAttribute('data-label');
		  if (inputValue.length > maxLength) {
		    alert(fieldLabel + "의 길이가 초과되었습니다. 최대 " + maxLength + "자를 입력해주세요.");
		    input.focus();
		    return false;
		  }
		  return true;
		}
		document.getElementById('update-form').addEventListener('submit', function(event) {
	        if (!validateMaxLengthAndSubmit(this)) {
	            event.preventDefault();
	        }
	    });
</script>
</head>
<body>

	<h1>게시물 수정</h1>

	<form id="update-form" name="update-form" action="update.do"
		method="post" enctype="multipart/form-data">
		<input type="hidden" name="seq" id="seq" value="${board.seq}" />

		<table align="center" width="500">
			<tr>
				<th>제목</th>
				<td><input type="text" id="title" name="title" data-label="제목"
					value="${board.title}" /></td>
			</tr>

			<tr>
				<th>이름</th>
				<td><input type="text" id="name" name="name" data-label="이름"
					value="${board.name}" /></td>
			</tr>

			<tr>
				<th>내용</th>
				<td><textarea id="content" name="content" data-label="내용"
						rows="5" cols="50">${board.content}</textarea></td>
			</tr>

			<tr>
				<th>비밀번호</th>
				<td><input type="password" id="pass" name="pass"
					data-label="비밀번호" /></td>
			</tr>


			<tr align="left">
				<td ">
					첨부파일: <sapn id="file-name"	data-file="${board.uploadedFile}"> 
					 ${not empty board.originalFilename ? board.originalFilename : '파일 없음'}</sapn>
					<button id="delete-file" type="button">삭제</button> 
					<input type="hidden" name="file_deleted" id="file_deleted" value="false" />
				</td>
			</tr>
			
			<tr align="left">
				<td colspan="2">
					<!-- 파일첨부: <input type="file" id="upload-file"	name="upload-file" /> -->
					
					
					<div class="filebox">
					  파일첨부:  <input class="upload-name"  placeholder="파일없음" readonly="readonly">
					    <label for="upload-file">선택</label> 
					    <input type="file" id="upload-file"	name="upload-file" >
					</div>
				</td>
			</tr>
			<tr align="center">
				<td colspan="2"><input type="submit" value="수정" /> <input
					type="button" value="취소" onclick="history.back(-1);" /> <input
					type="button" value="목록" onclick="location.href='list.do'" /></td>
			</tr>
		</table>
	</form>

	<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
	<script>
$(document).ready(function(){
	$("#upload-file").on('change', function () {
	    var file = this.files[0];
	    var fileName = file.name;
	    $(".upload-name").val(fileName);
	});
	
	  function checkPassword(seq, pass, callback) {
	    $.ajax({
	      url: '${pageContext.request.contextPath}/checkPassword.do',
	      type: 'POST',
	      data: {
	        seq: seq,
	        pass: pass
	      },
	      success: function (response) {
	        if (response === "success") {
	          callback(true);
	        } else {
	          callback(false);
	        }
	      },
	      error: function (error) {
	        console.error("Error: " + JSON.stringify(error));
	        callback(false);
	      }
	    });
	  }

	  function submitForm(event) {
	    event.preventDefault();
	    var seq = $('#seq').val();
	    var title = $('#title').val();
	    var name = $('#name').val();
	    var pass = $('#pass').val();
	    var content = $('#content').val();

	    checkPassword(seq, pass, function(isValid) {
	      if (isValid) {
	        $.ajax({
	          url: '${pageContext.request.contextPath}/board/update.do',
	          type: 'POST',
	          data: new FormData($('#update-form')[0]),
	          processData: false,
	          contentType: false,
	          success: function(response) {
	            if (response === 'success') {
	              alert('게시물 수정을 완료 했습니다.');
	              window.location.href = 'list.do';
	            } else {
	              alert('게시물 수정에 실패했습니다.');
	            }
	          },
	          error: function(error) {
	            console.error('Error: ' + JSON.stringify(error));
	            alert('게시물 수정에 실패했습니다.');
	          },
	        });
	      } else {
	        alert('비밀번호가 일치하지 않습니다.');
	      }
	    });
	  }

	  $('#update-form').on('submit', function(event) {
		    if (validateMaxLengthAndSubmit(this)) {
		        submitForm(event);
		    } else {
		        event.preventDefault();
		    }
		});
	});

	$('#delete-file').on('click', deleteFile);
	
	function deleteFile() {
		  var fileNameElement = $('#file-name');
		  var fileDeletedInputElement = $('#file_deleted');
		  var currentFile = fileNameElement.data('file');
		  if (currentFile) {
		    if (confirm('파일을 삭제하시겠습니까?')) {
		      fileNameElement.text('파일 없음');
		      fileNameElement.removeData('file');
		      fileDeletedInputElement.val('true');
		    }
		  } else {
		    fileNameElement.text('파일 없음');
		    fileNameElement.removeData('file');
		    fileDeletedInputElement.val('false');
		  }
	}
</script>

</body>
</html>