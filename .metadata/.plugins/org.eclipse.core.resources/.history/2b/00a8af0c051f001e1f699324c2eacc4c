package com.board.controller;

import com.board.VO.BoardVO;
import com.board.dao.BoardDao;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class WriteReplyController {

	@Autowired
	private BoardDao boardDao;

	@RequestMapping(value = "/board/writeReply.do", method = RequestMethod.POST)
    public ModelAndView process(@RequestParam("seq") int seq) {
        BoardVO board = boardDao.getBoard(seq);
        int groupId = board.getGroup_id();
        int depth = board.getDepth();
        int orderNo = board.getOrder_no();

        // 부모 게시물의 depth보다 하나 더 큰 depth 게시물 중 가장 일찍 등록된 것을 가져옴
        BoardVO nextBoard = boardDao.getNextBoard(groupId, depth + 1, orderNo); 
        if (nextBoard != null) {
            board.setParent_id(nextBoard.getSeq());
        } else {
            board.setParent_id(0);
        }

        ModelAndView mav = new ModelAndView();
        mav.setViewName("writeReply");
        mav.addObject("parentBoard", board);

        return mav;
    }

    @RequestMapping(value = "/board/saveReply.do", method = RequestMethod.POST)
    public ModelAndView saveReply(@ModelAttribute("boardVO") BoardVO boardVO,
								  @RequestParam("file") MultipartFile file,
								  HttpServletRequest request) throws IOException {

        // 파일 처리
        if (!file.isEmpty()) {
            String originalFilename = file.getOriginalFilename();
            String uniqueFileName = saveFile(file, request);
            boardVO.setOriginalFilename(originalFilename);
            boardVO.setUploadedFile(uniqueFileName);
        }

        int parentId = boardVO.getParent_id();
        BoardVO parentBoard = boardDao.getBoard(parentId);

        // 수정: 새로운 order_no와 depth를 설정
        boardVO.setDepth(parentBoard.getDepth() + 1);
        boardVO.setGroup_id(parentBoard.getGroup_id());

        int order_no = parentBoard.getOrder_no() + 1;
        List<BoardVO> nextBoards = boardDao.getBoardsGreaterThanOrderNo(boardVO.getGroup_id(), order_no);

        // update all order_no greater than the current
        for (BoardVO nextBoard : nextBoards) {
            int updatedOrderNo = nextBoard.getOrder_no() + 1;
            nextBoard.setOrder_no(updatedOrderNo);
            boardDao.updateOrderNo(nextBoard);
        }

        // Set the new reply's order_no to be the parent's order_no + 1
        boardVO.setOrder_no(order_no);

        // 답글 저장
        boardVO.setTitle("[답글] " + boardVO.getTitle());
        boardDao.insertReply(boardVO);

        ModelAndView mav = new ModelAndView("redirect:/board/list.do");
        return mav;
    }

    private String saveFile(MultipartFile file, HttpServletRequest request) throws IOException {
        String projectRealPath = request.getSession().getServletContext().getRealPath("/");
        String uploadDirPath = "upload";

        String originalFilename = file.getOriginalFilename();
        String fileExtension = originalFilename.substring(originalFilename.lastIndexOf("."));
        String uniqueFileName = UUID.randomUUID().toString() + fileExtension;

        byte[] bytes = file.getBytes();
        Path path = Paths.get(projectRealPath + uploadDirPath + File.separator + uniqueFileName);

        if (!Files.exists(path.getParent())) {
            Files.createDirectories(path.getParent());
        }

        Files.write(path, bytes);
        return uniqueFileName;
    }
}
