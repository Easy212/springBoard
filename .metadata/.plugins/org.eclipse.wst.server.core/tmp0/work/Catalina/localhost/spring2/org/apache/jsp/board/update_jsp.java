/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.65
 * Generated at: 2023-07-11 04:20:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class update_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>게시물 수정</title>\r\n");
      out.write("<style>\r\n");
      out.write("#file-name{\r\n");
      out.write("\tdisplay: inline-block;\r\n");
      out.write("\twidth: 177px;\r\n");
      out.write("\theight: 21px;\r\n");
      out.write("\tborder: 1px solid;\r\n");
      out.write("\tdisplay: inline-block; \r\n");
      out.write("\toverflow: hidden; \r\n");
      out.write("\ttext-overflow: ellipsis; \r\n");
      out.write("\twhite-space: nowrap;\r\n");
      out.write("\tfont-size: 14px;\r\n");
      out.write("\tvertical-align: middle;\r\n");
      out.write("}\n");
      out.write(".filebox .upload-name {\r\n");
      out.write("\tbox-sizing: border-box;\r\n");
      out.write("    display: inline-block;\r\n");
      out.write("    height: 21px;\r\n");
      out.write("    vertical-align: middle;\r\n");
      out.write("    border: 1px solid ;\r\n");
      out.write("    width: 179px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".filebox label {\r\n");
      out.write("    display: inline-block;\r\n");
      out.write("\tborder: 1px solid;\r\n");
      out.write("    vertical-align: middle;\r\n");
      out.write("    background-color: #F0F0F0;\r\n");
      out.write("    height: 20px;\r\n");
      out.write("    padding: 1px 6px;\r\n");
      out.write("    font-size: 14px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".filebox input[type=\"file\"] {\r\n");
      out.write("    position: absolute;\r\n");
      out.write("    width: 0;\r\n");
      out.write("    height: 0;\r\n");
      out.write("    padding: 0;\r\n");
      out.write("    overflow: hidden;\r\n");
      out.write("    border: 0;\r\n");
      out.write("}\r\n");
      out.write("\n");
      out.write("</style>\r\n");
      out.write("<script>\r\n");
      out.write("\t// 첫부분 공백 제거\r\n");
      out.write("\tfunction removeWhiteSpaces(input) {\r\n");
      out.write("\t  \tconst validValue = input.value.replace(/^\\s+/, '');\r\n");
      out.write("\t    if (input.value !== validValue) {\r\n");
      out.write("\t      input.value = validValue;\r\n");
      out.write("\t    }\r\n");
      out.write("\t}\r\n");
      out.write("\t \r\n");
      out.write("\t// 복붙했을경우 시작과 끝공백 제거\r\n");
      out.write("\tfunction handlePasteEvent(event) {\r\n");
      out.write("\t    // 텍스트를 가져오는 방법은 브라우저에 따라 다르다\r\n");
      out.write("\t    let pastedText = event.clipboardData\r\n");
      out.write("\t      ? event.clipboardData.getData('text')\r\n");
      out.write("\t      : window.clipboardData.getData('Text');\r\n");
      out.write("\t\r\n");
      out.write("\t    // 시작과 끝에 있는 공백 제거\r\n");
      out.write("\t    pastedText = pastedText.trim();\r\n");
      out.write("\t\r\n");
      out.write("\t    // 강제로 input의 value를 승인된 텍스트로 변경한다\r\n");
      out.write("\t    setTimeout(() => {\r\n");
      out.write("\t      event.target.value = pastedText;\r\n");
      out.write("\t    }, 0);\r\n");
      out.write("\t  }\r\n");
      out.write("\t//저장될 때 끝 부분의 공백을 제거\r\n");
      out.write("\tfunction trimEndOnSubmit(form) {\r\n");
      out.write("\t    form.title.value = form.title.value.replace(/\\s+$/, '');\r\n");
      out.write("\t    form.name.value = form.name.value.replace(/\\s+$/, '');\r\n");
      out.write("\t    form.content.value = form.content.value.replace(/\\s+$/, '');\r\n");
      out.write("\t    return true;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction validateMaxLengthAndSubmit(form) {\r\n");
      out.write("\t\t  trimEndOnSubmit(form);\r\n");
      out.write("\t\t\t  \r\n");
      out.write("\t\t  const fields = [\"title\", \"name\", \"content\", \"pass\"];\r\n");
      out.write("\t\t  const fieldLabels = [\"제목\", \"이름\", \"내용\", \"비밀번호\"];\r\n");
      out.write("\t\t  const maxLimits = [100, 50, 500, 10];\r\n");
      out.write("\r\n");
      out.write("\t\t  for (let i = 0; i < fields.length; i++) {\r\n");
      out.write("\t\t    const input = form[fields[i]];\r\n");
      out.write("\t\t    const fieldLabel = fieldLabels[i];\r\n");
      out.write("\r\n");
      out.write("\t\t    // 입력값이 없거나 공백만 있는 경우 경고창을 띄운다.\r\n");
      out.write("\t\t    input.value = input.value.trim(); \r\n");
      out.write("\r\n");
      out.write("\t\t    if (!input.value) {\r\n");
      out.write("\t\t      alert(fieldLabel + \"을(를) 입력해주세요.\");\r\n");
      out.write("\t\t      input.focus();\r\n");
      out.write("\t\t      return false;\r\n");
      out.write("\t\t    }\r\n");
      out.write("\r\n");
      out.write("\t\t    if (!validateInputMaxLength(input, maxLimits[i])) {\r\n");
      out.write("\t\t      return false;\r\n");
      out.write("\t\t    }\r\n");
      out.write("\t\t  }\r\n");
      out.write("\r\n");
      out.write("\t\t  return true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t// 입력값의 최대 길이를 검사하고 경고창을 출력한다.\r\n");
      out.write("\t\tfunction validateInputMaxLength(input, maxLength) {\r\n");
      out.write("\t\t  const inputValue = input.value;\r\n");
      out.write("\t\t  const fieldLabel = input.getAttribute('data-label');\r\n");
      out.write("\t\t  if (inputValue.length > maxLength) {\r\n");
      out.write("\t\t    alert(fieldLabel + \"의 길이가 초과되었습니다. 최대 \" + maxLength + \"자를 입력해주세요.\");\r\n");
      out.write("\t\t    input.focus();\r\n");
      out.write("\t\t    return false;\r\n");
      out.write("\t\t  }\r\n");
      out.write("\t\t  return true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tdocument.getElementById('update-form').addEventListener('submit', function(event) {\r\n");
      out.write("\t        if (!validateMaxLengthAndSubmit(this)) {\r\n");
      out.write("\t            event.preventDefault();\r\n");
      out.write("\t        }\r\n");
      out.write("\t    });\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t<h1>게시물 수정</h1>\r\n");
      out.write("\r\n");
      out.write("\t<form id=\"update-form\" name=\"update-form\" action=\"update.do\"\r\n");
      out.write("\t\tmethod=\"post\" enctype=\"multipart/form-data\">\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"seq\" id=\"seq\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${board.seq}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\" />\r\n");
      out.write("\r\n");
      out.write("\t\t<table align=\"center\" width=\"500\">\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th>제목</th>\r\n");
      out.write("\t\t\t\t<td><input type=\"text\" id=\"title\" name=\"title\" data-label=\"제목\"\r\n");
      out.write("\t\t\t\t\tvalue=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${board.title}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\" /></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th>이름</th>\r\n");
      out.write("\t\t\t\t<td><input type=\"text\" id=\"name\" name=\"name\" data-label=\"이름\"\r\n");
      out.write("\t\t\t\t\tvalue=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${board.name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\" /></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th>내용</th>\r\n");
      out.write("\t\t\t\t<td><textarea id=\"content\" name=\"content\" data-label=\"내용\"\r\n");
      out.write("\t\t\t\t\t\trows=\"5\" cols=\"50\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${board.content}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("</textarea></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th>비밀번호</th>\r\n");
      out.write("\t\t\t\t<td><input type=\"password\" id=\"pass\" name=\"pass\"\r\n");
      out.write("\t\t\t\t\tdata-label=\"비밀번호\" /></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t<tr >\r\n");
      out.write("\t\t\t\t<th align=\"center\">첨부파일</th>\r\n");
      out.write("\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t<sapn id=\"file-name\"\tdata-file=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${board.uploadedFile}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\"> \r\n");
      out.write("\t\t\t\t\t ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty board.originalFilename ? board.originalFilename : '파일 없음'}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("</sapn>\r\n");
      out.write("\t\t\t\t\t<button id=\"delete-file\" type=\"button\">삭제</button> \r\n");
      out.write("\t\t\t\t\t<input type=\"hidden\" name=\"file_deleted\" id=\"file_deleted\" value=\"false\" />\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<tr >\r\n");
      out.write("\t\t\t\t<th align=\"center\">파일첨부</th>\r\n");
      out.write("\t\t\t\t\t<!-- 파일첨부: <input type=\"file\" id=\"upload-file\"\tname=\"upload-file\" /> -->\r\n");
      out.write("\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t<div class=\"filebox\">\r\n");
      out.write("\t\t\t\t\t  \t<input class=\"upload-name\"  placeholder=\"선택된 파일 없음\" readonly=\"readonly\">\r\n");
      out.write("\t\t\t\t\t    <label for=\"upload-file\">선택</label> \r\n");
      out.write("\t\t\t\t\t    <input type=\"file\" id=\"upload-file\"\tname=\"upload-file\" >\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr align=\"center\">\r\n");
      out.write("\t\t\t\t<td colspan=\"2\"><input type=\"submit\" value=\"수정\" /> <input\r\n");
      out.write("\t\t\t\t\ttype=\"button\" value=\"취소\" onclick=\"history.back(-1);\" /> <input\r\n");
      out.write("\t\t\t\t\ttype=\"button\" value=\"목록\" onclick=\"location.href='list.do'\" /></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t</form>\r\n");
      out.write("\r\n");
      out.write("\t<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n");
      out.write("\t<script>\r\n");
      out.write("$(document).ready(function(){\r\n");
      out.write("\t$(\"#upload-file\").on('change', function () {\r\n");
      out.write("\t    var file = this.files[0];\r\n");
      out.write("\t    var fileName = file.name;\r\n");
      out.write("\t    $(\".upload-name\").val(fileName);\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t  function checkPassword(seq, pass, callback) {\r\n");
      out.write("\t    $.ajax({\r\n");
      out.write("\t      url: '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/checkPassword.do',\r\n");
      out.write("\t      type: 'POST',\r\n");
      out.write("\t      data: {\r\n");
      out.write("\t        seq: seq,\r\n");
      out.write("\t        pass: pass\r\n");
      out.write("\t      },\r\n");
      out.write("\t      success: function (response) {\r\n");
      out.write("\t        if (response === \"success\") {\r\n");
      out.write("\t          callback(true);\r\n");
      out.write("\t        } else {\r\n");
      out.write("\t          callback(false);\r\n");
      out.write("\t        }\r\n");
      out.write("\t      },\r\n");
      out.write("\t      error: function (error) {\r\n");
      out.write("\t        console.error(\"Error: \" + JSON.stringify(error));\r\n");
      out.write("\t        callback(false);\r\n");
      out.write("\t      }\r\n");
      out.write("\t    });\r\n");
      out.write("\t  }\r\n");
      out.write("\r\n");
      out.write("\t  function submitForm(event) {\r\n");
      out.write("\t    event.preventDefault();\r\n");
      out.write("\t    var seq = $('#seq').val();\r\n");
      out.write("\t    var title = $('#title').val();\r\n");
      out.write("\t    var name = $('#name').val();\r\n");
      out.write("\t    var pass = $('#pass').val();\r\n");
      out.write("\t    var content = $('#content').val();\r\n");
      out.write("\r\n");
      out.write("\t    checkPassword(seq, pass, function(isValid) {\r\n");
      out.write("\t      if (isValid) {\r\n");
      out.write("\t        $.ajax({\r\n");
      out.write("\t          url: '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/board/update.do',\r\n");
      out.write("\t          type: 'POST',\r\n");
      out.write("\t          data: new FormData($('#update-form')[0]),\r\n");
      out.write("\t          processData: false,\r\n");
      out.write("\t          contentType: false,\r\n");
      out.write("\t          success: function(response) {\r\n");
      out.write("\t            if (response === 'success') {\r\n");
      out.write("\t              alert('게시물 수정을 완료 했습니다.');\r\n");
      out.write("\t              window.location.href = 'list.do';\r\n");
      out.write("\t            } else {\r\n");
      out.write("\t              alert('게시물 수정에 실패했습니다.');\r\n");
      out.write("\t            }\r\n");
      out.write("\t          },\r\n");
      out.write("\t          error: function(error) {\r\n");
      out.write("\t            console.error('Error: ' + JSON.stringify(error));\r\n");
      out.write("\t            alert('게시물 수정에 실패했습니다.');\r\n");
      out.write("\t          },\r\n");
      out.write("\t        });\r\n");
      out.write("\t      } else {\r\n");
      out.write("\t        alert('비밀번호가 일치하지 않습니다.');\r\n");
      out.write("\t      }\r\n");
      out.write("\t    });\r\n");
      out.write("\t  }\r\n");
      out.write("\r\n");
      out.write("\t  $('#update-form').on('submit', function(event) {\r\n");
      out.write("\t\t    if (validateMaxLengthAndSubmit(this)) {\r\n");
      out.write("\t\t        submitForm(event);\r\n");
      out.write("\t\t    } else {\r\n");
      out.write("\t\t        event.preventDefault();\r\n");
      out.write("\t\t    }\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\t$('#delete-file').on('click', deleteFile);\r\n");
      out.write("\t\r\n");
      out.write("\tfunction deleteFile() {\r\n");
      out.write("\t\t  var fileNameElement = $('#file-name');\r\n");
      out.write("\t\t  var fileDeletedInputElement = $('#file_deleted');\r\n");
      out.write("\t\t  var currentFile = fileNameElement.data('file');\r\n");
      out.write("\t\t  if (currentFile) {\r\n");
      out.write("\t\t    if (confirm('파일을 삭제하시겠습니까?')) {\r\n");
      out.write("\t\t      fileNameElement.text('파일 없음');\r\n");
      out.write("\t\t      fileNameElement.removeData('file');\r\n");
      out.write("\t\t      fileDeletedInputElement.val('true');\r\n");
      out.write("\t\t    }\r\n");
      out.write("\t\t  } else {\r\n");
      out.write("\t\t    fileNameElement.text('파일 없음');\r\n");
      out.write("\t\t    fileNameElement.removeData('file');\r\n");
      out.write("\t\t    fileDeletedInputElement.val('false');\r\n");
      out.write("\t\t  }\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
