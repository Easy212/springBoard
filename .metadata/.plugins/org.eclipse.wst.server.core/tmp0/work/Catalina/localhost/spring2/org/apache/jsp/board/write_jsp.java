/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.65
 * Generated at: 2023-07-11 04:25:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class write_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>글쓰기</title>\r\n");
      out.write("<script>\r\n");
      out.write("\t// 첫부분 공백 제거\r\n");
      out.write("\tfunction removeWhiteSpaces(input) {\r\n");
      out.write("\t  \tconst validValue = input.value.replace(/^\\s+/, '');\r\n");
      out.write("\t    if (input.value !== validValue) {\r\n");
      out.write("\t      input.value = validValue;\r\n");
      out.write("\t    }\r\n");
      out.write("\t}\r\n");
      out.write("\t \r\n");
      out.write("\t// 복붙했을경우 시작과 끝공백 제거\r\n");
      out.write("\tfunction handlePasteEvent(event) {\r\n");
      out.write("\t    // 텍스트를 가져오는 방법은 브라우저에 따라 다르다\r\n");
      out.write("\t    let pastedText = event.clipboardData\r\n");
      out.write("\t      ? event.clipboardData.getData('text')\r\n");
      out.write("\t      : window.clipboardData.getData('Text');\r\n");
      out.write("\t\r\n");
      out.write("\t    // 시작과 끝에 있는 공백 제거\r\n");
      out.write("\t    pastedText = pastedText.trim();\r\n");
      out.write("\t\r\n");
      out.write("\t    // 강제로 input의 value를 승인된 텍스트로 변경한다\r\n");
      out.write("\t    setTimeout(() => {\r\n");
      out.write("\t      event.target.value = pastedText;\r\n");
      out.write("\t    }, 0);\r\n");
      out.write("\t  }\r\n");
      out.write("\t//저장될 때 끝 부분의 공백을 제거\r\n");
      out.write("\tfunction trimEndOnSubmit(form) {\r\n");
      out.write("\t    form.title.value = form.title.value.replace(/\\s+$/, '');\r\n");
      out.write("\t    form.name.value = form.name.value.replace(/\\s+$/, '');\r\n");
      out.write("\t    form.content.value = form.content.value.replace(/\\s+$/, '');\r\n");
      out.write("\t    return true;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction validateMaxLengthAndSubmit(form) {\r\n");
      out.write("\t\t  trimEndOnSubmit(form);\r\n");
      out.write("\t\t\t  \r\n");
      out.write("\t\t  const fields = [\"title\", \"name\", \"content\", \"pass\"];\r\n");
      out.write("\t\t  const fieldLabels = [\"제목\", \"이름\", \"내용\", \"비밀번호\"];\r\n");
      out.write("\t\t  const maxLimits = [100, 50, 500, 10];\r\n");
      out.write("\r\n");
      out.write("\t\t  for (let i = 0; i < fields.length; i++) {\r\n");
      out.write("\t\t    const input = form[fields[i]];\r\n");
      out.write("\t\t    const fieldLabel = fieldLabels[i];\r\n");
      out.write("\r\n");
      out.write("\t\t    // 입력값이 없거나 공백만 있는 경우 경고창을 띄운다.\r\n");
      out.write("\t\t    input.value = input.value.trim(); \r\n");
      out.write("\r\n");
      out.write("\t\t    if (!input.value) {\r\n");
      out.write("\t\t      alert(fieldLabel + \"을(를) 입력해주세요.\");\r\n");
      out.write("\t\t      input.focus();\r\n");
      out.write("\t\t      return false;\r\n");
      out.write("\t\t    }\r\n");
      out.write("\r\n");
      out.write("\t\t    if (!validateInputMaxLength(input, maxLimits[i])) {\r\n");
      out.write("\t\t      return false;\r\n");
      out.write("\t\t    }\r\n");
      out.write("\t\t  }\r\n");
      out.write("\r\n");
      out.write("\t\t  return true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t// 입력값의 최대 길이를 검사하고 경고창을 출력한다.\r\n");
      out.write("\t\tfunction validateInputMaxLength(input, maxLength) {\r\n");
      out.write("\t\t  const inputValue = input.value;\r\n");
      out.write("\t\t  const fieldLabel = input.getAttribute('data-label');\r\n");
      out.write("\t\t  if (inputValue.length > maxLength) {\r\n");
      out.write("\t\t    alert(fieldLabel + \"의 길이가 초과되었습니다. 최대 \" + maxLength + \"자를 입력해주세요.\");\r\n");
      out.write("\t\t    input.focus();\r\n");
      out.write("\t\t    return false;\r\n");
      out.write("\t\t  }\r\n");
      out.write("\t\t  return true;\r\n");
      out.write("\t\t}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h1>글쓰기</h1>\r\n");
      out.write("\r\n");
      out.write("\t<form\r\n");
      out.write("\t  action=\"save.do\"\r\n");
      out.write("\t  method=\"post\"\r\n");
      out.write("\t  enctype=\"multipart/form-data\"\r\n");
      out.write("\t  onsubmit=\"return validateMaxLengthAndSubmit(this);\"\r\n");
      out.write("\t  accept-charset=\"UTF-8\"\r\n");
      out.write("\t>\r\n");
      out.write("\t\t<table align=\"center\" width=\"500\">\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td>제목:</td>\r\n");
      out.write("\t\t\t\t<td><input type=\"text\" name=\"title\" data-label=\"제목\"\r\n");
      out.write("\t\t\t\t\toninput=\"removeWhiteSpaces(this)\" onpaste=\"handlePasteEvent(this)\" /></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td>이름:</td>\r\n");
      out.write("\t\t\t\t<td><input type=\"text\" name=\"name\" data-label=\"이름\"\r\n");
      out.write("\t\t\t\t\toninput=\"removeWhiteSpaces(this)\" onpaste=\"handlePasteEvent(this)\" /></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td>내용:</td>\r\n");
      out.write("\t\t\t\t<td><textarea name=\"content\" data-label=\"내용\" rows=\"5\" cols=\"50\"\r\n");
      out.write("\t\t\t\t\t\toninput=\"removeWhiteSpaces(this)\" onpaste=\"handlePasteEvent(this)\"></textarea></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td>비밀번호:</td>\r\n");
      out.write("\t\t\t\t<td><input type=\"password\" name=\"pass\" data-label=\"비밀번호\"/></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td>파일첨부:</td>\r\n");
      out.write("\t\t\t\t<td><input type=\"file\" name=\"file\"></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td colspan=\"2\" align=\"center\">\r\n");
      out.write("\t\t\t\t\t<input type=\"submit\" value=\"등록\" />\r\n");
      out.write("\t\t\t\t\t<input type=\"button\" onclick=\"location.href='list.do'\" value=\"취소\" />\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
